1.state 数据
2.jsx 模板
3.数据 + 模板 相结合形成真实的DOM来显示
4.state发生改变
5.数据 + 模板 结合，生成真实的DOM，替换原始的DOM


缺陷：
第一次生成了一个完整的DOM片段
第二次生成一个完整的DOM片段
第二次DOM会替换掉第一次的DOM，非常耗费性能
1.state 数据
2.jsx 模板
3.数据 + 模板相结合形成真实的DOM来显示
4.state发生改变
5.数据 + 模板 结合，生成真实的DOM，并不直接替换原始的DOM
6.新的DOM（DocumentFragment）  和原始的DOM 做对比，找差异
7.找出input框发生了变化
8.只用新的DOM中的input元素，替换掉老的DOM中的input元素


缺陷
1.state数据

2.JSX模板

3.数据 + 模板 生成虚拟DOM（虚拟DOM就是一个JS对象，用它来描述真实的DOM）
    ['div',{id:'abc},['span',{},''hello world']]

4.数据+模板 结合，生成真实的DOM，来显示
 <div id="abc"><span>hello</span></div>

5.state发生变化

6.数据 + 模板 生成新的虚拟DOM （极大的提升了性能）
    ['div',{id:'abc},['span',{},''hello world']] 

7.比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span中的内容
 
8.直接操作DOM，改变span中的内容

Diff, different;
React的虚拟DOM是同层比对，可使得算法简单，则运算速度会快


优点
 1.性能提升了。
 2.它使得跨端应哟个得以实现。React Native


diff算法的作用：
   计算出Virtual DOM中真正变化的部分，并只针对该部分进行原生DOM 操作，而非重新渲染整个页面
传统diff算法：
  通过循环递归对节点进行一次对比，算法复杂度达O(n^3),n是数得节点数



  生命周期函数指在某一个时可组件会自动调用执行的函数

  Initialization
  
  Mounting (componentWillMount->render->componentDidMount)

  Updation 
    props

    states 
     if(shouldComponentUpdate  == true){
         componentWillUpdate->render->componentDidUpdate
     }else{
         //则不执行下一步
     }


  Unmounting


//Vue和react的区别
 1.react严格上针对的是MVC模式的View层，Vue则是mvvm模式
 2.操纵dom的方式不同，vue使用的是指令操作dom,react时通过JS进行操作
 3.数据绑定不同，vue实现的是双向绑定，react的数据流动是单项的
 4.react中state是不能直接改变的们需要使用setState改变的。vue中的state不是必须的，数据主要是由data属性在vue对象中管理的


 React性能优化阶段函数是：ShouldComponentUpdate

 React性能优化的方案
  1.重写shouldComponentUpdate来避免不必要的dom操作
  2.使用production版本的react.js
  3.使用key来帮助React识别列表中所有子组件的最小变化

  介绍一下webpack
  webpack是一个前端模块打包工具，主要由入口、出口、loader、plugin四个部分。前端的打包工具还有一个gulp，不过gulp侧重于前端开发的过程，
  而webpack侧重于模块，例如他会将css文件看作一个模块，通过css-loader将css打包成符合css的静态资源

  Es6中箭头函数与普通函数的区别
  1.普通function的声明在变量提升中是最高的，箭头函数没有函数提升
  2.箭头函数没有this,arguments
  3.箭头函数不能作为构造函数，不能被new,没有property
  4.call和apply方法只有参数，没有作用域
   
  展示组件和容器组件的区别
    展示组件关心组件看起来是什么。展示组件专门通过props接收数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，
  通常也只关心UI状态而不是数据的状态
    容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其他容器组件提供数据和行为，他们会调用flux actions,并将其作为回调提供给展示组件
  容器组件经常是有状态的，因为他们是其他组件的数据源

  
  